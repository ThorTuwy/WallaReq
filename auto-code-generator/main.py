import tomllib,json,os
from pathlib import Path

from datamodel_code_generator import InputFileType, generate
from datamodel_code_generator import DataModelType

dataDirectory="../backend/data"
templatesDirectoryBack="../backend/dataTemplates"
templatesDirectoryFront="../frontend/src/templates"
autoGeneratedTypes="../frontend/src/auto-generated-types"



configName="configs"
topicName="topicsToCheck"
TOML_config = os.path.join("./configs", configName+".toml")
TOML_topics = os.path.join("./configs", topicName+".toml")
def recursiveConfigsMaker(configs,new):
    print(configs)
    if "type" in configs:
         
        if "defaultValue" in configs:
            new=configs["defaultValue"]

        else:
            match configs["type"]:
                case "text" | "select":
                    new=""
                case "number":
                    new=0
                case "checkbox":
                    new=False
                case "stringArray":
                    new=[]
                case "objectsArray":
                    new=[]
                case _:
                    raise ValueError("Not a valid type")
        
        return new
        
    for key, value in configs.items():
        new.setdefault(key,{})
        newValue=recursiveConfigsMaker(value,new[key])
        if newValue!=None:
            new[key]=newValue
    
    return None

def makeConfig(file) -> dict:
    
    with open(file, 'rb') as f:
        configs=tomllib.load(f)
    

    configDic={}

    recursiveConfigsMaker(configs,configDic)
    
    print(configDic)

    return configDic
            
def verifyData():
    print("Verifying data...")
    for dataName in ["configs","topicsToCheck","uploadAlready"]:

        dataFile = os.path.join(dataDirectory, dataName+".json")

        try:
            with open(dataFile) as f:
                json.load(f)
        except:
            with open(dataFile,"w") as f:
                if dataName=="configs":
                    json.dump(makeConfig(TOML_config), f)
                    continue
                json.dump({}, f)



typeDict={"text":"string","number":"number","checkbox":"boolean","stringArray":"array","select":"string"}



def recursiveConfigsParser(configs) -> None:

    if isinstance(configs,dict):

        typeOfObject="object"
        if "type" in configs and configs["type"]=="objectsArray":
            del configs["type"]
            typeOfObject="array"

        toIterateConfigs=configs.copy()


    

        if typeOfObject=="array":
            configs["items"]={}
            configs["items"]["properties"]={}
            configs["items"]["type"]="object"
            configs["type"]="array"


        else:
            configs["properties"]={}
            configs["type"]="object"
        
        for index,value in (toIterateConfigs).items():
            
            if "type" in value and value["type"]!="objectsArray":
                valueType=value["type"]

                value={"type":typeDict[valueType],"description":value["textLabel"]}
                

                print(valueType)
                if valueType=="stringArray":
                    value["items"]={"type":"string"}
            else:
                recursiveConfigsParser(value)

                
            
            del configs[index]
            
            if typeOfObject == "array":
                configs["items"]["properties"][index]=value
            else:
                configs["properties"][index]=value

        

    else:
        print(configs)
        print(type(configs))
        raise ValueError("This is not intended to happen")


            

def updateModels(file,fileName):
    
    with open(file, 'rb') as f:
        configs=tomllib.load(f)
    
    #Frontend templates
    with open(os.path.join(templatesDirectoryFront,f"template_{fileName}.json"),"w") as f:
        json.dump(configs, f)

    print(configs)

    recursiveConfigsParser(configs)

    #Adding the final things to be a JSON schema
    configs["title"]=fileName
    configs["$schema"]="http://json-schema.org/draft-07/schema#"


    pythonModel = Path(templatesDirectoryBack, f"{fileName}_model.py")

    #Backends models
    generate(
        json.dumps(configs),
        input_file_type=InputFileType.JsonSchema,
        input_filename=f"{fileName}.json",
        output=pythonModel,
        output_model_type=DataModelType.PydanticV2BaseModel,
    )



    #Frontend models TODO:Move all of this pls
    


    with open(os.path.join(autoGeneratedTypes,f"schema_{fileName}.json"),"w") as f:
        json.dump(configs,f)
    os.system(f"../frontend/node_modules/.bin/json2ts {os.path.join(autoGeneratedTypes,f"schema_{fileName}.json")} > {os.path.join(autoGeneratedTypes,f"{fileName}.d.ts")}")

    

def templateMaker(file,fileName):
    with open(os.path.join(templatesDirectoryBack,f"template_{fileName}.json"),"w") as f:
        json.dump(makeConfig(file), f)
    




verifyData()
updateModels(TOML_config,configName)
updateModels(TOML_topics,topicName)

templateMaker(TOML_config,configName)
templateMaker(TOML_topics,topicName)